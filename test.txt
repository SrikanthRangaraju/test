import java.io.*;
import java.util.*;

public class FilterCSVByColumns {
    public static void main(String[] args) {
        // Input and output file paths
        String csvFilePath = "input.csv";        // Path to the input CSV file
        String columnsFilePath = "columns.txt";  // Path to the file with column names
        String outputCsvFilePath = "filtered_output.csv"; // Path to the output CSV file

        try {
            // Step 1: Read the required column names from the .txt file
            List<String> requiredColumns = readColumnsFromFile(columnsFilePath);

            // Step 2: Filter the CSV file to keep only the required columns
            filterCSVColumns(csvFilePath, requiredColumns, outputCsvFilePath);

            System.out.println("Filtered CSV has been written to: " + outputCsvFilePath);
        } catch (IOException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    /**
     * Reads the required column names from a .txt file into a list.
     */
    private static List<String> readColumnsFromFile(String filePath) throws IOException {
        List<String> columns = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                columns.add(line.trim());
            }
        }
        return columns;
    }

    /**
     * Filters the CSV file to include only the specified columns.
     */
    private static void filterCSVColumns(String csvFilePath, List<String> requiredColumns, String outputCsvFilePath) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(csvFilePath));
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputCsvFilePath))) {

            // Read the header row
            String headerLine = reader.readLine();
            if (headerLine == null) {
                throw new IOException("CSV file is empty.");
            }

            // Split the header row into column names
            String[] headers = headerLine.split(",");
            List<Integer> columnIndexes = new ArrayList<>();

            // Find indexes of required columns
            for (int i = 0; i < headers.length; i++) {
                if (requiredColumns.contains(headers[i].trim().replaceAll("\"", ""))) {
                    columnIndexes.add(i);
                }
            }

            if (columnIndexes.isEmpty()) {
                throw new IOException("None of the specified columns were found in the CSV file.");
            }

            // Write the filtered header to the output file
            List<String> filteredHeaders = new ArrayList<>();
            for (int index : columnIndexes) {
                filteredHeaders.add(headers[index]);
            }
            writer.write(String.join(",", filteredHeaders));
            writer.newLine();

            // Process and write the rows with the selected columns
            String line;
            while ((line = reader.readLine()) != null) {
                String[] row = line.split(",");
                List<String> filteredRow = new ArrayList<>();
                for (int index : columnIndexes) {
                    if (index < row.length) {
                        filteredRow.add(row[index]);
                    }
                }
                writer.write(String.join(",", filteredRow));
                writer.newLine();
            }
        }
    }
}
