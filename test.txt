private static void writeStatisticsWithRanges(String filePath, Map<String, Map<String, String>> expectedData,
                                              Map<String, Map<String, String>> actualData, Set<String> columnsToCompare) throws IOException {
    int totalCommonIds = 0;
    Map<String, Integer> columnMatchCounts = new HashMap<>();

    // Calculate total matches for each column
    for (String subjectId : expectedData.keySet()) {
        if (actualData.containsKey(subjectId)) {
            totalCommonIds++;
            Map<String, String> expectedRow = expectedData.get(subjectId);
            Map<String, String> actualRow = actualData.get(subjectId);

            for (String column : columnsToCompare) {
                String expectedValue = expectedRow.getOrDefault(column, "").trim().toUpperCase();
                String actualValue = actualRow.getOrDefault(column, "").trim().toUpperCase();

                if (expectedValue.equals(actualValue)) {
                    columnMatchCounts.put(column, columnMatchCounts.getOrDefault(column, 0) + 1);
                }
            }
        }
    }

    // Categorize columns into match percentage ranges
    Map<String, List<String>> matchRanges = new LinkedHashMap<>();
    matchRanges.put("100%", new ArrayList<>());
    matchRanges.put("99%", new ArrayList<>());
    matchRanges.put("90-98%", new ArrayList<>());
    matchRanges.put("80-89%", new ArrayList<>());
    matchRanges.put("70-79%", new ArrayList<>());
    matchRanges.put("60-69%", new ArrayList<>());
    matchRanges.put("50-59%", new ArrayList<>());
    matchRanges.put("40-49%", new ArrayList<>());
    matchRanges.put("<40%", new ArrayList<>());

    for (String column : columnsToCompare) {
        int matches = columnMatchCounts.getOrDefault(column, 0);
        double percentage = totalCommonIds > 0 ? (matches * 100.0) / totalCommonIds : 0;

        if (percentage == 100) {
            matchRanges.get("100%").add(column);
        } else if (percentage >= 99) {
            matchRanges.get("99%").add(column);
        } else if (percentage >= 90) {
            matchRanges.get("90-98%").add(column);
        } else if (percentage >= 80) {
            matchRanges.get("80-89%").add(column);
        } else if (percentage >= 70) {
            matchRanges.get("70-79%").add(column);
        } else if (percentage >= 60) {
            matchRanges.get("60-69%").add(column);
        } else if (percentage >= 50) {
            matchRanges.get("50-59%").add(column);
        } else if (percentage >= 40) {
            matchRanges.get("40-49%").add(column);
        } else {
            matchRanges.get("<40%").add(column);
        }
    }

    // Write statistics to the file
    try (BufferedWriter bw = new BufferedWriter(new FileWriter(filePath))) {
        bw.write("Total number of common IDs: " + totalCommonIds);
        bw.newLine();
        bw.newLine();

        System.out.println("Total common IDs: " + totalCommonIds);

        // Write match percentages for each column
        for (String range : matchRanges.keySet()) {
            List<String> columnsInRange = matchRanges.get(range);
            bw.write(range + " Match: " + columnsInRange.size() + " columns");
            bw.newLine();
            if (!columnsInRange.isEmpty()) {
                bw.write("Columns: " + String.join(", ", columnsInRange));
                bw.newLine();
            }
        }
    }
}
