import java.io.*;
import java.util.*;

public class DeleteColumnsFromCSV {

    public static void main(String[] args) {
        String inputCsvFilePath = "path/to/input.csv"; // Path to the input CSV file
        String outputCsvFilePath = "path/to/output.csv"; // Path to the updated output CSV file
        String columnsToDeleteFilePath = "path/to/columns_to_delete.txt"; // Path to the .txt file containing column names to delete

        try {
            // Read the list of columns to delete from the file
            List<String> columnsToDelete = readColumnsFromFile(columnsToDeleteFilePath);

            // Read the input CSV file
            BufferedReader csvReader = new BufferedReader(new FileReader(inputCsvFilePath));
            StringBuilder outputContent = new StringBuilder();

            // Read and parse the header line
            String headerLine = csvReader.readLine();
            if (headerLine == null) {
                System.out.println("The input CSV file is empty.");
                return;
            }

            String[] headers = headerLine.split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)"); // Split by commas handling quotes
            List<Integer> columnsToDeleteIndices = getColumnIndices(headers, columnsToDelete);

            // Write the updated header to the output file
            List<String> updatedHeaders = getUpdatedHeaders(headers, columnsToDeleteIndices);
            outputContent.append(String.join(",", updatedHeaders)).append("\n");

            // Process and write the remaining rows
            String row;
            while ((row = csvReader.readLine()) != null) {
                String[] values = row.split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)", -1); // Handle quoted fields
                List<String> updatedRow = getUpdatedRow(values, columnsToDeleteIndices);
                outputContent.append(String.join(",", updatedRow)).append("\n");
            }

            csvReader.close();

            // Write the output content to a new file
            BufferedWriter csvWriter = new BufferedWriter(new FileWriter(outputCsvFilePath));
            csvWriter.write(outputContent.toString());
            csvWriter.close();

            System.out.println("Processing complete. Updated CSV saved to: " + outputCsvFilePath);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to read column names to delete from the .txt file
    private static List<String> readColumnsFromFile(String filePath) throws IOException {
        List<String> columns = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                columns.add(line.trim());
            }
        }
        return columns;
    }

    // Method to get the indices of the columns to delete
    private static List<Integer> getColumnIndices(String[] headers, List<String> columnsToDelete) {
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < headers.length; i++) {
            String header = headers[i].replaceAll("^\"|\"$", "").trim(); // Remove quotes and trim
            if (columnsToDelete.contains(header)) {
                indices.add(i);
            }
        }
        return indices;
    }

    // Method to get updated headers after deleting specified columns
    private static List<String> getUpdatedHeaders(String[] headers, List<Integer> columnsToDeleteIndices) {
        List<String> updatedHeaders = new ArrayList<>();
        for (int i = 0; i < headers.length; i++) {
            if (!columnsToDeleteIndices.contains(i)) {
                updatedHeaders.add(headers[i]);
            }
        }
        return updatedHeaders;
    }

    // Method to get updated row values after deleting specified columns
    private static List<String> getUpdatedRow(String[] rowValues, List<Integer> columnsToDeleteIndices) {
        List<String> updatedRow = new ArrayList<>();
        for (int i = 0; i < rowValues.length; i++) {
            if (!columnsToDeleteIndices.contains(i)) {
                updatedRow.add(rowValues[i]);
            }
        }
        return updatedRow;
    }
}
