import java.io.*;
import java.nio.file.*;
import java.util.regex.*;

public class CSVDataCleaner {
    public static void main(String[] args) {
        String inputFolderPath = "C:\\"; // Change this to your folder path
        String outputFolderPath = "C:\cleaned\\"; // Folder for cleaned files

        File folder = new File(inputFolderPath);
        if (!folder.exists() || !folder.isDirectory()) {
            System.out.println("Invalid input folder path.");
            return;
        }

        // Ensure output folder exists
        new File(outputFolderPath).mkdirs();

        File[] files = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".csv"));
        if (files == null || files.length == 0) {
            System.out.println("No CSV files found in the folder.");
            return;
        }

        for (File file : files) {
            processCSVFile(file, outputFolderPath);
        }

        System.out.println("All CSV files have been processed and saved.");
    }

    private static void processCSVFile(File inputFile, String outputFolderPath) {
        String outputFilePath = outputFolderPath + inputFile.getName().replace(".csv", "_cleaned.csv");

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(outputFilePath))) {

            String line;
            while ((line = reader.readLine()) != null) {
                String cleanedLine = cleanNumericFields(line);
                writer.write(cleanedLine);
                writer.newLine();
            }

            System.out.println("Processed: " + inputFile.getName());

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String cleanNumericFields(String line) {
        Pattern pattern = Pattern.compile("(-?\\d{1,3}(,\\d{3})*(\\.\\d+)?)"); 
        Matcher matcher = pattern.matcher(line);
        StringBuffer sb = new StringBuffer();

        while (matcher.find()) {
            String numericValue = matcher.group(1);
            String cleanedValue = numericValue.replace(",", ""); // Remove commas
            matcher.appendReplacement(sb, cleanedValue);
        }
        matcher.appendTail(sb);

        return sb.toString();
    }
}
