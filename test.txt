import java.io.*;
import java.util.*;

public class CleanSpecificColumnsInCSV {

    public static void main(String[] args) {
        String inputCsvFilePath = "path/to/input.csv"; // Path to the input CSV file
        String outputCsvFilePath = "path/to/output.csv"; // Path to save the updated CSV file
        String columnsToCleanFilePath = "path/to/columns_to_clean.txt"; // Path to the .txt file with column names to clean

        try {
            // Read the list of columns to clean from the file
            List<String> columnsToClean = readColumnsFromFile(columnsToCleanFilePath);

            // Read the input CSV file
            BufferedReader csvReader = new BufferedReader(new FileReader(inputCsvFilePath));
            StringBuilder outputContent = new StringBuilder();

            // Read and parse the header line
            String headerLine = csvReader.readLine();
            if (headerLine == null) {
                System.out.println("The input CSV file is empty.");
                return;
            }

            String[] headers = headerLine.split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)"); // Split by commas handling quotes
            List<Integer> columnsToCleanIndices = getColumnIndices(headers, columnsToClean);

            // Write the header to the output file
            outputContent.append(headerLine).append("\n");

            // Process and clean each row
            String row;
            while ((row = csvReader.readLine()) != null) {
                String[] values = row.split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)", -1); // Handle quoted fields
                for (int columnIndex : columnsToCleanIndices) {
                    if (columnIndex < values.length) {
                        values[columnIndex] = cleanValue(values[columnIndex]);
                    }
                }
                outputContent.append(String.join(",", values)).append("\n");
            }

            csvReader.close();

            // Write the cleaned content to a new file
            BufferedWriter csvWriter = new BufferedWriter(new FileWriter(outputCsvFilePath));
            csvWriter.write(outputContent.toString());
            csvWriter.close();

            System.out.println("Processing complete. Updated CSV saved to: " + outputCsvFilePath);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to read column names to clean from the .txt file
    private static List<String> readColumnsFromFile(String filePath) throws IOException {
        List<String> columns = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                columns.add(line.trim());
            }
        }
        return columns;
    }

    // Method to get the indices of the columns to clean
    private static List<Integer> getColumnIndices(String[] headers, List<String> columnsToClean) {
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < headers.length; i++) {
            String header = headers[i].replaceAll("^\"|\"$", "").trim(); // Remove quotes and trim
            if (columnsToClean.contains(header)) {
                indices.add(i);
            }
        }
        return indices;
    }

    // Method to clean a value by removing extra spaces and fixing delimiters
    private static String cleanValue(String value) {
        // Replace multiple spaces with a single space
        value = value.replaceAll("\\s{2,}", " ");
        // Remove spaces around the pipe symbol
        value = value.replaceAll("\\s*\\|\\s*", "|");
        // Trim the entire value to ensure no trailing or leading spaces
        value = value.trim();
        // Remove trailing pipe symbol, if present
        if (value.endsWith("|")) {
            value = value.substring(0, value.length() - 1);
        }
        return value;
    }
}
