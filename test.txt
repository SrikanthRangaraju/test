private static void processSetFolder(File setFolder) {
    System.out.println("Reading row mismatch file...");
    Set<String> rowIds = readRows(setFolder);
    System.out.println("Total row IDs found: " + rowIds.size());

    System.out.println("Reading column mismatch file...");
    List<String> columns = readColumns(setFolder);
    System.out.println("Total columns found: " + columns.size());

    if (rowIds.isEmpty() || columns.isEmpty()) {
        System.out.println("Skipping folder " + setFolder.getName() + " (No row IDs or columns found)");
        return;
    }

    System.out.println("Reading actual CSV...");
    Map<String, Map<String, String>> actualData = readCSV(new File(setFolder, "actualoutputfile.csv"), rowIds, columns);
    System.out.println("Actual CSV read successfully. Total rows: " + actualData.size());

    System.out.println("Reading expected CSV...");
    Map<String, Map<String, String>> expectedData = readCSV(new File(setFolder, "expectedoutputfile.csv"), rowIds, columns);
    System.out.println("Expected CSV read successfully. Total rows: " + expectedData.size());

    List<String[]> differences = new ArrayList<>();  // Store non-matching records
    List<String[]> matchedRecords = new ArrayList<>(); // Store matched records
    Map<String, int[]> columnStats = new HashMap<>();

    columns.forEach(column -> columnStats.put(column, new int[2]));

    for (String rowId : rowIds) {
        Map<String, String> actualRow = actualData.getOrDefault(rowId, Collections.emptyMap());
        Map<String, String> expectedRow = expectedData.getOrDefault(rowId, Collections.emptyMap());

        for (String column : columns) {
            int[] stats = columnStats.get(column);
            stats[1]++; // Total comparisons

            String actualValue = actualRow.get(column);
            String expectedValue = expectedRow.get(column);

            if (!areValuesEqual(actualValue, expectedValue)) {
                // If values are different, store them in differences.csv
                differences.add(new String[]{rowId, column, formatValue(actualValue), formatValue(expectedValue)});
                stats[0]++;
            } else {
                // If values match exactly, store them in matched.csv
                matchedRecords.add(new String[]{rowId, column, formatValue(actualValue), formatValue(expectedValue)});
            }
        }
    }

    System.out.println("Total Differences Found: " + differences.size());
    System.out.println("Total Matched Records Found: " + matchedRecords.size());

    // Write differences to differences.csv
    System.out.println("Writing differences to file...");
    writeDifferences(setFolder, differences);
    System.out.println("Differences written successfully.");

    // Write matched records to matched.csv
    System.out.println("Writing matched records to file...");
    writeMatchedRecords(setFolder, matchedRecords);
    System.out.println("File matched.csv written successfully.");

    // Write summary report
    System.out.println("Writing summary report...");
    writeSummaryReport(setFolder, columnStats, rowIds.size());
    System.out.println("Summary report written successfully.");

    System.out.println("Finished processing folder: " + setFolder.getName());
}

--------------
private static void writeMatchedRecords(File setFolder, List<String[]> matchedRecords) {
    File matchedFile = new File(setFolder, "matched.csv");

    try (PrintWriter writer = new PrintWriter(new FileWriter(matchedFile))) {
        writer.println("SubjectID,Column,Actual,Expected");
        for (String[] record : matchedRecords) {
            writer.println(String.join(",", record));
        }
    } catch (IOException e) {
        System.out.println("Error writing matched.csv: " + e.getMessage());
    }
}

-----------------------------
private static void writeDifferences(File setFolder, List<String[]> differences) {
    File diffFile = new File(setFolder, "differences.csv");

    try (PrintWriter writer = new PrintWriter(new FileWriter(diffFile))) {
        writer.println("SubjectID,Column,Actual,Expected");
        for (String[] diff : differences) {
            writer.println(String.join(",", diff));
        }
    } catch (IOException e) {
        System.out.println("Error writing differences.csv: " + e.getMessage());
    }
}
