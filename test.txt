import java.io.*;
import java.util.*;

public class CompareCSVFiles {

    public static void main(String[] args) throws IOException {
        String expectedFilePath = "Expected_Output.csv";  // Path to the expected output file
        String actualFilePath = "Actual_Output.csv";      // Path to the actual output file
        String columnsFilePath = "Columns_To_Compare.txt"; // Path to the file specifying columns to compare
        String outputCSVFile = "Differences.csv";         // Output file for differences
        String outputStatsFile = "Statistics.txt";        // Output file for statistics

        // Specify the delimiter for each file
        char expectedDelimiter = ',';  // Delimiter for the expected file (comma)
        char actualDelimiter = ';';    // Delimiter for the actual file (semicolon)

        // Read the columns to compare from the .txt file
        Set<String> columnsToCompare = readColumns(columnsFilePath);
        System.out.println("Columns to compare: " + columnsToCompare);

        // Read CSV files into maps (Key: SUBJECTID, Value: Map<ColumnName, Value>)
        Map<String, Map<String, String>> expectedData = readCSV(expectedFilePath, expectedDelimiter);
        Map<String, Map<String, String>> actualData = readCSV(actualFilePath, actualDelimiter);

        System.out.println("Expected file loaded. Total rows: " + expectedData.size());
        System.out.println("Actual file loaded. Total rows: " + actualData.size());

        // Compare the two maps and find differences
        List<String[]> differences = new ArrayList<>();
        compareFiles(expectedData, actualData, columnsToCompare, differences);

        // Write the differences to a CSV file
        writeDifferences(outputCSVFile, differences);

        // Write statistics to a TXT file
        writeStatistics(outputStatsFile, expectedData, actualData, columnsToCompare);

        System.out.println("Differences written to: " + outputCSVFile);
        System.out.println("Statistics written to: " + outputStatsFile);
    }

    private static Map<String, Map<String, String>> readCSV(String filePath, char delimiter) throws IOException {
        Map<String, Map<String, String>> dataMap = new LinkedHashMap<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String headerLine = br.readLine(); // Read the header line
            if (headerLine == null) {
                throw new IllegalArgumentException("Empty file: " + filePath);
            }
            String[] columns = headerLine.split(String.valueOf(delimiter));

            // Normalize headers to uppercase
            for (int i = 0; i < columns.length; i++) {
                columns[i] = columns[i].toUpperCase();
            }

            System.out.println("Headers for file " + filePath + ": " + Arrays.toString(columns));

            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(String.valueOf(delimiter), -1); // Include empty values
                if (values.length > 0) {
                    String subjectId = values[0].toUpperCase(); // Normalize SUBJECTID to uppercase
                    Map<String, String> rowData = new HashMap<>();
                    for (int i = 0; i < columns.length; i++) {
                        rowData.put(columns[i], i < values.length ? values[i] : "");
                    }
                    dataMap.put(subjectId, rowData);

                    if (dataMap.size() <= 5) { // Debug: Print only the first 5 rows
                        System.out.println("SUBJECTID: " + subjectId + ", Data: " + rowData);
                    }
                }
            }
        }
        return dataMap;
    }

    private static Set<String> readColumns(String filePath) throws IOException {
        Set<String> columns = new HashSet<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                columns.add(line.trim().toUpperCase()); // Normalize column names to uppercase
            }
        }
        return columns;
    }

    private static void compareFiles(Map<String, Map<String, String>> expectedData,
                                     Map<String, Map<String, String>> actualData,
                                     Set<String> columnsToCompare,
                                     List<String[]> differences) {

        for (String subjectId : expectedData.keySet()) {
            if (!actualData.containsKey(subjectId)) {
                differences.add(new String[]{subjectId, "Missing in Actual Output", "", ""});
                System.out.println("Missing in Actual Output: SUBJECTID = " + subjectId);
            } else {
                Map<String, String> expectedRow = expectedData.get(subjectId);
                Map<String, String> actualRow = actualData.get(subjectId);

                for (String column : columnsToCompare) {
                    String expectedValue = expectedRow.getOrDefault(column, "").trim().toUpperCase();
                    String actualValue = actualRow.getOrDefault(column, "").trim().toUpperCase();

                    if (!expectedValue.equals(actualValue)) {
                        differences.add(new String[]{subjectId, column, expectedValue, actualValue});
                        System.out.println("Mismatch: SUBJECTID=" + subjectId + ", Column=" + column +
                                ", Expected='" + expectedValue + "', Actual='" + actualValue + "'");
                    }
                }
            }
        }

        for (String subjectId : actualData.keySet()) {
            if (!expectedData.containsKey(subjectId)) {
                differences.add(new String[]{subjectId, "Extra in Actual Output", "", ""});
                System.out.println("Extra in Actual Output: SUBJECTID = " + subjectId);
            }
        }
    }

    private static void writeDifferences(String filePath, List<String[]> differences) throws IOException {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filePath))) {
            bw.write("SubjectId,Column,Expected Value,Actual Value");
            bw.newLine();
            for (String[] diff : differences) {
                bw.write(String.join(",", diff));
                bw.newLine();
            }
        }
    }

    private static void writeStatistics(String filePath, Map<String, Map<String, String>> expectedData,
                                        Map<String, Map<String, String>> actualData, Set<String> columnsToCompare) throws IOException {
        int totalCommonIds = 0;
        Map<String, Integer> columnMatchCounts = new HashMap<>();

        for (String subjectId : expectedData.keySet()) {
            if (actualData.containsKey(subjectId)) {
                totalCommonIds++;
                Map<String, String> expectedRow = expectedData.get(subjectId);
                Map<String, String> actualRow = actualData.get(subjectId);

                for (String column : columnsToCompare) {
                    String expectedValue = expectedRow.getOrDefault(column, "").trim().toUpperCase();
                    String actualValue = actualRow.getOrDefault(column, "").trim().toUpperCase();

                    if (expectedValue.equals(actualValue)) {
                        columnMatchCounts.put(column, columnMatchCounts.getOrDefault(column, 0) + 1);
                    }
                }
            }
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filePath))) {
            bw.write("Total number of common IDs: " + totalCommonIds);
            bw.newLine();
            bw.newLine();

            System.out.println("Total common IDs: " + totalCommonIds);

            for (String column : columnsToCompare) {
                int matches = columnMatchCounts.getOrDefault(column, 0);
                double percentage = totalCommonIds > 0 ? (matches * 100.0) / totalCommonIds : 0;
                bw.write("Column: " + column + " - Match Percentage: " + String.format("%.2f", percentage) + "%");
                bw.newLine();
                System.out.println("Column: " + column + ", Matches: " + matches +
                        ", Total Common IDs: " + totalCommonIds + ", Match Percentage: " + String.format("%.2f", percentage) + "%");
            }
        }
    }
}
