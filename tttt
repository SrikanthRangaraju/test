package starter.common.utilities;

import java.io.*;
import java.net.*;
import java.util.Base64;
import org.json.JSONObject;

public class TokenGenerator {
    private static String cachedToken = null;
    private static long tokenGeneratedTime = 0; // milliseconds

    // Token expiry time in milliseconds (5 minutes = 300,000 ms)
    private static final long EXPIRY_DURATION = 5 * 60 * 1000;

    public static synchronized String getAccessToken() {
        long now = System.currentTimeMillis();
        
        // If token is valid, return cached
        if (cachedToken != null && (now - tokenGeneratedTime) < EXPIRY_DURATION) {
            return cachedToken;
        }

        // Else generate new token
        try {
            String urlStr = "https://cfed.csrv-dev.aws.transu.net:8443/as/token.oauth2";
            String clientId = "YOUR_CLIENT_ID";
            String clientSecret = "YOUR_CLIENT_SECRET";
            String scope = "YOUR_SCOPE";

            URL url = new URL(urlStr);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

            String auth = clientId + ":" + clientSecret;
            String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes());
            conn.setRequestProperty("Authorization", "Basic " + encodedAuth);

            String body = "grant_type=client_credentials&scope=" + URLEncoder.encode(scope, "UTF-8");
            OutputStream os = conn.getOutputStream();
            os.write(body.getBytes());
            os.flush();
            os.close();

            InputStream is = conn.getResponseCode() == 200 ? conn.getInputStream() : conn.getErrorStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            JSONObject json = new JSONObject(response.toString());
            if (json.has("access_token")) {
                cachedToken = json.getString("access_token");
                tokenGeneratedTime = now;
                return cachedToken;
            } else {
                System.err.println("Token not found. Response: " + response);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }
}