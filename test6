import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.util.*;

public class ReportConsolidator {
    private static class CategoryData {
        int count = 0;
        Set<String> columns = new LinkedHashSet<>();
    }

    public static void main(String[] args) throws IOException {
        Path folderPath = Paths.get("path/to/your/folder"); // Update this path
        Path outputPath = folderPath.resolve("consolidated_report.txt");
        
        Map<String, CategoryData> consolidated = new HashMap<>();
        List<String> categoryOrder = Arrays.asList(
            "100%", "99%", "90-98%", "80-89%", "70-79%", "Less than 70%"
        );

        try (DirectoryStream<Path> stream = Files.newDirectoryStream(folderPath, "*.txt")) {
            for (Path filePath : stream) {
                if (Files.isRegularFile(filePath)) {
                    processFile(filePath, consolidated);
                }
            }
        }

        writeOutput(outputPath, consolidated, categoryOrder);
        System.out.println("Consolidated report generated: " + outputPath);
    }

    private static void processFile(Path filePath, Map<String, CategoryData> consolidated) throws IOException {
        String currentCategory = null;
        
        try (BufferedReader reader = Files.newBufferedReader(filePath, StandardCharsets.UTF_8)) {
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                
                if (line.contains("% match >>>>")) {
                    String[] parts = line.split(">>>>");
                    String percentagePart = parts[0].split("%")[0].trim() + "%";
                    int count = Integer.parseInt(parts[1].split("\\(")[0].trim());
                    
                    consolidated.putIfAbsent(percentagePart, new CategoryData());
                    CategoryData data = consolidated.get(percentagePart);
                    data.count += count;
                    currentCategory = percentagePart;
                } 
                else if (line.startsWith("Columns:")) {
                    if (currentCategory != null && consolidated.containsKey(currentCategory)) {
                        String[] columns = line.split(":")[1].split(",");
                        for (String col : columns) {
                            consolidated.get(currentCategory).columns.add(col.trim());
                        }
                    }
                }
            }
        }
    }

    private static void writeOutput(Path outputPath, Map<String, CategoryData> consolidated, List<String> categoryOrder) 
            throws IOException {
        try (BufferedWriter writer = Files.newBufferedWriter(outputPath, StandardCharsets.UTF_8)) {
            writer.write("Consolidated Match Percentage Report\n");
            writer.write("====================================\n\n");

            for (String category : categoryOrder) {
                CategoryData data = consolidated.get(category);
                if (data != null && data.count > 0) {
                    writer.write(String.format("%s match >>>> %d\n", category, data.count));
                    writer.write("Columns: " + String.join(", ", data.columns) + "\n\n");
                }
            }
            
            writer.write("\n=== End of Report ===");
        }
    }
}
