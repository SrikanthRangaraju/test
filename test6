import java.io.*;
import java.util.*;

public class RenameAndSortHeaders {
    public static void main(String[] args) {
        String inputFilePath = "input.csv";  // Replace with your input file path
        String outputFilePath = "output.csv"; // Replace with your output file path

        // Define header mappings (old header to new header)
        Map<String, String> headerMappings = new HashMap<>();
        headerMappings.put("FECHADEFUNCION", "FESTA"); // Add more mappings as needed

        try (BufferedReader br = new BufferedReader(new FileReader(inputFilePath));
             BufferedWriter bw = new BufferedWriter(new FileWriter(outputFilePath))) {

            // Read the first line (headers)
            String headerLine = br.readLine();
            if (headerLine != null) {
                String[] updatedHeaders = renameAndSortHeaders(headerLine, headerMappings);
                bw.write(String.join(",", updatedHeaders));
                bw.newLine();

                // Sort data columns based on the new header order
                List<Integer> columnOrder = getColumnOrder(headerLine, updatedHeaders);
                String line;
                while ((line = br.readLine()) != null) {
                    bw.write(sortRowByColumns(line, columnOrder));
                    bw.newLine();
                }
            }

            System.out.println("Headers renamed and sorted successfully!");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String[] renameAndSortHeaders(String headerLine, Map<String, String> mappings) {
        // Split headers by comma
        String[] headers = headerLine.split(",");
        for (int i = 0; i < headers.length; i++) {
            String header = headers[i].replace("\"", "").trim(); // Remove quotes for comparison
            if (mappings.containsKey(header)) {
                headers[i] = "\"" + mappings.get(header) + "\""; // Replace with new header
            }
        }
        Arrays.sort(headers, String.CASE_INSENSITIVE_ORDER); // Sort headers alphabetically
        return headers;
    }

    private static List<Integer> getColumnOrder(String originalHeaderLine, String[] sortedHeaders) {
        String[] originalHeaders = originalHeaderLine.split(",");
        Map<String, Integer> originalHeaderIndex = new HashMap<>();

        for (int i = 0; i < originalHeaders.length; i++) {
            originalHeaderIndex.put(originalHeaders[i].replace("\"", "").trim(), i);
        }

        List<Integer> columnOrder = new ArrayList<>();
        for (String sortedHeader : sortedHeaders) {
            String cleanHeader = sortedHeader.replace("\"", "").trim();
            columnOrder.add(originalHeaderIndex.get(cleanHeader));
        }
        return columnOrder;
    }

    private static String sortRowByColumns(String row, List<Integer> columnOrder) {
        String[] cells = row.split(",");
        String[] sortedRow = new String[cells.length];
        for (int i = 0; i < columnOrder.size(); i++) {
            sortedRow[i] = cells[columnOrder.get(i)];
        }
        return String.join(",", sortedRow);
    }
}
