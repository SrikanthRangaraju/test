import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;

public class FilterCSVColumns {

    public static void main(String[] args) {
        // ... (rest of the main method is the same)
    }

    private static Set<String> readHeadersFromFile(String headersFile) throws IOException {
        Set<String> headers = new HashSet<>();
        try (BufferedReader br = new BufferedReader(new FileReader(headersFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                headers.add(line.trim().toUpperCase(Locale.ROOT)); // Convert to uppercase for case-insensitive comparison
            }
        }
        return headers;
    }

    private static void filterAndWriteCSV(String csvFile, Set<String> targetHeaders, String outputFile) throws IOException {
        try (BufferedReader br = new BufferedReader(new FileReader(csvFile));
             FileWriter writer = new FileWriter(outputFile)) {

            String headerLine = br.readLine();
            if (headerLine == null) {
                System.out.println("Input CSV file is empty.");
                return;
            }

            List<String> allHeaders = Arrays.asList(headerLine.split(","));
            List<Integer> targetIndices = new ArrayList<>();
            List<String> outputHeaders = new ArrayList<>();

            for (int i = 0; i < allHeaders.size(); i++) {
                if (targetHeaders.contains(allHeaders.get(i).trim().toUpperCase(Locale.ROOT))) { // Case-insensitive comparison here
                    targetIndices.add(i);
                    outputHeaders.add(allHeaders.get(i)); // Keep original case for output header
                }
            }
             if(outputHeaders.isEmpty()){
                System.out.println("No matching headers found in the CSV file.");
                return;
            }

            writer.write(String.join(",", outputHeaders) + "\n");

            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                List<String> outputValues = new ArrayList<>();
                for (int index : targetIndices) {
                    if (index < values.length) {
                        outputValues.add(values[index]);
                    }
                }
                writer.write(String.join(",", outputValues) + "\n");
            }
        }
    }
}
