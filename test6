import java.io.*;
import java.nio.file.*;
import java.util.*;

public class AdviserOutputProcessor {

    @Then("Then read the adviser output, sort and run the stats")
    public void sortAndRunStats() throws Exception {
        // Hardcoded file paths
        String actualFilePath = "./actual-output/actual.csv";  // Path to the actual file
        String expectedFilePath = "./expected-output-folder/expected.csv";  // Path to the expected file
        String differenceFolder = "./diff-values-folder/";

        // Output file paths
        String differencesCsvPath = differenceFolder + "differences.csv";
        String matchSummaryPath = differenceFolder + "match_summary.txt";

        // Step 1: Read and clean actual.csv
        List<Map<String, String>> actualData = readAndCleanCSV(actualFilePath);

        // Step 2: Read expected.csv (unchanged)
        List<Map<String, String>> expectedData = readCSV(expectedFilePath);

        // Step 3: Sort actual.csv columns
        List<String> sortedHeaders = getSortedHeaders(new ArrayList<>(actualData.get(0).keySet()));
        actualData = sortColumns(actualData, sortedHeaders);

        // Step 4: Compare processed actual.csv with expected.csv
        writeDifferencesDetailed(actualData, expectedData, differencesCsvPath, matchSummaryPath, sortedHeaders);
    }

    // Helper method to read and clean the actual file
    private List<Map<String, String>> readAndCleanCSV(String filePath) throws IOException {
        List<Map<String, String>> data = new ArrayList<>();
        List<String> headers = new ArrayList<>();

        // Check if the file exists
        Path path = Paths.get(filePath);
        if (!Files.exists(path)) {
            throw new FileNotFoundException("File not found: " + filePath);
        }

        try (BufferedReader br = Files.newBufferedReader(path)) {
            String line;
            int row = 0;

            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                if (row == 0) {
                    headers.addAll(Arrays.asList(values));
                } else {
                    Map<String, String> rowData = new LinkedHashMap<>();
                    for (int i = 0; i < values.length; i++) {
                        if (!headers.get(i).equalsIgnoreCase("CANTIDADCHEQUES") &&
                            !headers.get(i).equalsIgnoreCase("FECHAPUBLICACION") &&
                            !headers.get(i).equalsIgnoreCase("MOTIVO")) {
                            rowData.put(headers.get(i), values[i]);
                        }
                    }
                    data.add(rowData);
                }
                row++;
            }
        }

        return data;
    }

    // Helper method to read expected file (unchanged)
    private List<Map<String, String>> readCSV(String filePath) throws IOException {
        List<Map<String, String>> data = new ArrayList<>();
        List<String> headers = new ArrayList<>();

        // Check if the file exists
        Path path = Paths.get(filePath);
        if (!Files.exists(path)) {
            throw new FileNotFoundException("File not found: " + filePath);
        }

        try (BufferedReader br = Files.newBufferedReader(path)) {
            String line;
            int row = 0;

            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                if (row == 0) {
                    headers.addAll(Arrays.asList(values));
                } else {
                    Map<String, String> rowData = new LinkedHashMap<>();
                    for (int i = 0; i < values.length; i++) {
                        rowData.put(headers.get(i), values[i]);
      
